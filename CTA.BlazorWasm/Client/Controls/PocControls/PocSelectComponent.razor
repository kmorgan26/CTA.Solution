@inject PocManager pocManager

<FormFieldComponent LabelName="POC">
    <ControlToRender>
        <InputSelect ValueExpression="@(()=> SelectedPocId)" id="pocSelect" DisplayName="POC" class="form-control" Value="SelectedPocId"
            ValueChanged="@((int? value) => ChangePoc(value))">
            <option value=0>-----</option>
            @foreach (var item in _pocVms)
            {
                <option value="@item.Id">@item.Name</option>
            }
        </InputSelect>
    </ControlToRender>
</FormFieldComponent>

@code {

    [Parameter]
    public EventCallback<int?> PocIdChanged { get; set; }

    [Parameter]
    public int? SelectedPocId { get; set; }

    [CascadingParameter]
    public AppStateComponent? appStateComponent { get; set; }

    private List<GenericListVm> _pocVms = new();

    private async Task ChangePoc(int? value)
    {
        SelectedPocId = Convert.ToInt32(value);
        await PocIdChanged.InvokeAsync(SelectedPocId);
    }

    protected override async Task OnInitializedAsync()
    {
        var pocs = await pocManager.GetAllAsync();
        _pocVms = Mapping.Mapper.Map<List<GenericListVm>>(pocs);
    }

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            if(appStateComponent is not null && appStateComponent.PaginationQuery.TrackingFilter is not null)
            {
                await Task.Delay(0);
                SelectedPocId  = 
                appStateComponent.PaginationQuery.TrackingFilter.PocId != null 
                    ? appStateComponent.PaginationQuery.TrackingFilter.PocId : 0;
            }
        }
        catch { }
    }
}