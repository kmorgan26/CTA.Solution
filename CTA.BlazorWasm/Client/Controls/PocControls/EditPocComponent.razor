@inject PocManager pocManager
@inject NavigationManager _nav

<div class="row">
    <div class="col-md-6 col-sm-12">
        @if (PocVm != null)
        {
            <EditForm Model="@PocVm" OnValidSubmit="@UpdatePoc">

                <FormFieldComponent LabelName="First">
                    <ControlToRender>
                        <InputText class="form-control" @bind-Value="PocVm.FirstName" />
                    </ControlToRender>
                </FormFieldComponent>

                <FormFieldComponent LabelName="Last">
                    <ControlToRender>
                        <InputText class="form-control" @bind-Value="PocVm.LastName" />
                    </ControlToRender>
                </FormFieldComponent>

                <FormFieldComponent LabelName="Initials">
                    <ControlToRender>
                        <InputText class="form-control" @bind-Value="PocVm.Name" />
                    </ControlToRender>
                </FormFieldComponent>

                <FormFieldComponent LabelName="Active?">
                    <ControlToRender>
                        <InputCheckbox @bind-Value="PocVm.IsActive"/>
                    </ControlToRender>
                </FormFieldComponent>

                <MudButton Variant="Variant.Filled" ButtonType="ButtonType.Submit" Color="Color.Primary" Size="Size.Small">Update</MudButton>
                <MudButton Link="/pocs" Variant="Variant.Filled" Color="Color.Error" Size="Size.Small">Cancel</MudButton>
                
            </EditForm>
        }
    </div>
</div>

@code {

    [Parameter]
    public int PocId { get; set; }

    public PocListVm PocVm { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var poc = await pocManager.GetByIdAsync(PocId);
        PocVm = Mapping.Mapper.Map<PocListVm>(poc);
    }
    protected async Task UpdatePoc()
    {
        var poc = Mapping.Mapper.Map<Poc>(PocVm);
        await pocManager.UpdateAsync(poc);
        _nav.NavigateTo("/pocs");
    }

}