@using System.Text.Json
@inject TrackingThreadManager trackingThreadManager

<h3>
    <span>icon</span>
    Thread List for: <ProjectNameComponent ProjectId="@ProjectId"></ProjectNameComponent>
</h3>

<div class="row mb-4">
    <div class="col col-md-6 col-sm-12">
        <a class="btn btn-success btn-sm" href=@($"threads/create/{ProjectId}") role="button">New</a>
    </div>
</div>

<MudDataGrid Items="@threadList"
    PageSize="10"
    ShowPager
    Data="threadList"
    CommandMode="DataGridCommandMode.Default"
    Class="col col-md-6 col-sm-12"
    Responsive>
    
    <Column T="GenericListVm" Field="@nameof(GenericListVm.Id)" Caption="ID" Sortable="true"/>
    <Column T="GenericListVm" Field="@nameof(GenericListVm.Name)" Caption="Name" Sortable="true"/>
    <Column T="GenericListVm">
        @*<DisplayTemplate>
            @{
                <a class="btn btn-primary btn-sm" href="/thread/@context.Id" role="button">Select</a>
            }
        </DisplayTemplate>*@
    </Column>
    <Column T="GenericListVm">
        @*<DisplayTemplate>
            @{
                <a class="btn btn-info btn-sm" href="/thread/edit/@context.Id" role="button">Edit</a>
            }
        </DisplayTemplate>*@
    </Column>
</MudDataGrid>

@code {

    [Parameter]
    public int ProjectId { get; set; }

    private List<GenericListVm> threadList = new();

    protected override async Task OnInitializedAsync()
    {
        var id = ProjectId;
        var items = await trackingThreadManager.GetByIdAsync(ProjectId);
        threadList = Mapping.Mapper.Map<List<GenericListVm>>(items);
    }

}
