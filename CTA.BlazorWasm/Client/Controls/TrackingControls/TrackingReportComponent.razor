@inject TrackingManager trackingManager

<MudTable Items="TableData"
          CurrentPage = "@appStateComponent.PagedResponse.PageNumber"
          RowsPerPage = "@appStateComponent.PagedResponse.PageSize"
          Hover="true" 
          Breakpoint = "Breakpoint.Sm"
          Striped="true" 
          Dense="true"
          Elevation = "3"
          TotalItems="@appStateComponent.PagedResponse.TotalRecords">

    <HeaderContent>
        <MudTh>Thread</MudTh>
        <MudTh>Tracking #</MudTh>
        <MudTh>Status</MudTh>
        <MudTh>To/From</MudTh>
        <MudTh>Project</MudTh>
        <MudTh>Topic</MudTh>
        <MudTh>Subject</MudTh>
        <MudTh>Sent/Rec</MudTh>
        <MudTh>Type</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>@context.ThreadId</MudTd>
        <MudTd>
            <a href="tracking/@context.Id">
                <MudIcon Icon="@Icons.Material.Filled.Link" Size="Size.Small" />
                @context.Id
            </a>
        </MudTd>
        <MudTd DataLabel="Thread">@context.Status</MudTd>
        <MudTd DataLabel="Thread">@context.ToFromName</MudTd>
        <MudTd DataLabel="Thread">@context.ProjectName</MudTd>
        <MudTd DataLabel="Thread">@context.TopicName</MudTd>
        <MudTd DataLabel="Thread">@context.Subject</MudTd>
        <MudTd DataLabel="Thread">@context.SentOrReceived.ToShortDateString()</MudTd>
        <MudTd DataLabel="Thread">@context.CorrespondenceType</MudTd>

    </RowTemplate>
    <FooterContent>
        <PaginationComponent 
            TotalPages="appStateComponent.PagedResponse.TotalPages" 
            CurrentPage="appStateComponent.PaginationQuery.PageNumber"
            Radius="2" SelectedPage="SelectedPage">

        </PaginationComponent>
        <span class="align-content-end">
            Total Records: @appStateComponent.PagedResponse.TotalRecords
        </span>
    </FooterContent>
</MudTable>

@code {

    [CascadingParameter]
    public AppStateComponent? appStateComponent { get; set; }

    [Parameter]
    public string EncodedString { get; set; } = string.Empty;

    //private MudTable<TrackingReportVm> table;

    public List<TrackingReportVm> TableData { get; set; } = new();

    private async Task SelectedPage(int page)
    {
        appStateComponent.PaginationQuery.PageNumber = page;
        LoadData();
    }
    private async Task Pageup()
    {
        appStateComponent.PaginationQuery.PageNumber++;
        await LoadData();
    }
    private async Task PageDown()
    {
        appStateComponent.PaginationQuery.PageNumber--;
        await LoadData();
    }
    private async Task LoadData()
    {
        appStateComponent.AddTrackingFilterToRequest();

        EncodedString = await SerializeAndEncode.ObjectToJsonAndEncode(@appStateComponent.PaginationQuery);

        var trackings = await trackingManager.GetTrackingsFiltered(EncodedString);

        appStateComponent.PagedResponse.TotalRecords = trackings.TotalRecords;

        TableData = Mapping.Mapper.Map<List<TrackingReportVm>>(trackings.Data);
        StateHasChanged();
    }
    protected override async Task OnParametersSetAsync()
    {
        await LoadData();
    }

    //public async Task<TableData<TrackingReportVm>> LoadTrackings(TableState state)
    //{
    //    appStateComponent.PaginationQuery.PageSize = state.PageSize;
    //    appStateComponent.PaginationQuery.PageNumber = state.Page + 1;

    //    var trackings = await trackingManager.GetTrackingsFiltered(EncodedString);


    //    return new TableData<TrackingReportVm>()
    //    {
    //        Items = Mapping.Mapper.Map<List<TrackingReportVm>>(trackings.Data),
    //        TotalItems = appStateComponent.PagedResponse.TotalRecords,
    //    };
    //}

    //protected override async Task OnParametersSetAsync()
    //{
    //    var trackings = await trackingManager.GetTrackingsFiltered(EncodedString);
    //    appStateComponent.PagedResponse.Data = Mapping.Mapper.Map<List<TrackingReportVm>>(trackings);
    //}
}