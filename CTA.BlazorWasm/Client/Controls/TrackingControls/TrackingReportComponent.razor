@inject TrackingManager trackingManager

<MudTable Items="@trackingReportVms" Hover="true" Striped="true" Dense="true">
    <HeaderContent>
        <MudTh>Thread</MudTh>
        <MudTh>Tracking #</MudTh>
        <MudTh>Status</MudTh>
        <MudTh>To/From</MudTh>
        <MudTh>Project</MudTh>
        <MudTh>Topic</MudTh>
        <MudTh>Subject</MudTh>
        <MudTh>Sent/Rec</MudTh>
        <MudTh>Type</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Thread">@context.ThreadId</MudTd>
        <MudTd DataLabel="Thread">@context.Id</MudTd>
        <MudTd DataLabel="Thread">@context.Status</MudTd>
        <MudTd DataLabel="Thread">@context.ToFromName</MudTd>
        <MudTd DataLabel="Thread">@context.ProjectName</MudTd>
        <MudTd DataLabel="Thread">@context.TopicName</MudTd>
        <MudTd DataLabel="Thread">@context.Subject</MudTd>
        <MudTd DataLabel="Thread">@context.SentOrReceived.ToShortDateString()</MudTd>
        <MudTd DataLabel="Thread">@context.CorrespondenceType</MudTd>
        
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {

    [Parameter]
    public string EncodedString { get; set; } = string.Empty;

    private List<TrackingReportVm> trackingReportVms = new();

    private TrackingFilter filter = new();

    protected override async Task OnParametersSetAsync()
    {
        var trackings = await trackingManager.GetTrackingsFiltered(EncodedString);
        trackingReportVms = Mapping.Mapper.Map<List<TrackingReportVm>>(trackings);
    }
}