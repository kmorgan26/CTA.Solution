@inject TrackingManager trackingManager

<MudTable Items="TableData"
          CurrentPage="@appStateComponent.PagedResponse.PageNumber"
          RowsPerPage="@appStateComponent.PagedResponse.PageSize"
          Hover="true"
          Breakpoint="Breakpoint.Sm"
          Striped="true"
          Dense="true"
          Elevation="3"
          TotalItems="@appStateComponent.PagedResponse.TotalRecords">
    <HeaderContent>
        <MudTh>Tracking #</MudTh>
        <MudTh>Thread</MudTh>
        <MudTh>Status</MudTh>
        <MudTh>To/From</MudTh>
        <MudTh>Project</MudTh>
        <MudTh>Topic</MudTh>
        <MudTh>Subject</MudTh>
        <MudTh>Sent/Rec</MudTh>
        <MudTh>Type</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>
            <a href="tracking/@context.Id">
                <MudIcon Icon="@Icons.Material.Filled.Link" Size="Size.Small" />
                @context.Id
            </a>
        </MudTd>
        <MudTd>@context.ThreadId</MudTd>
        <MudTd DataLabel="Thread">@context.Status</MudTd>
        <MudTd DataLabel="Thread">@context.ToFromName</MudTd>
        <MudTd DataLabel="Thread">@context.ProjectName</MudTd>
        <MudTd DataLabel="Thread">@context.TopicName</MudTd>
        <MudTd DataLabel="Thread">@context.Subject</MudTd>
        <MudTd DataLabel="Thread">@context.SentOrReceived.ToShortDateString()</MudTd>
        <MudTd DataLabel="Thread">@context.CorrespondenceType</MudTd>

    </RowTemplate>
    <PagerContent>
        <PaginationComponent TotalPages="appStateComponent.PagedResponse.TotalPages"
                             CurrentPage="appStateComponent.PaginationQuery.PageNumber"
                             TotalRecords="appStateComponent.PagedResponse.TotalRecords"
                             Radius="2" SelectedPage="SelectedPage">
        </PaginationComponent>
    </PagerContent>
</MudTable>
<span class="align-content-end">
            Total Records: @appStateComponent.PagedResponse.TotalRecords
            Total Pages: @appStateComponent.PagedResponse.TotalPages
        </span>
@code {

    [CascadingParameter]
    public AppStateComponent? appStateComponent { get; set; }

    [Parameter]
    public string EncodedString { get; set; } = string.Empty;

    public List<TrackingReportVm> TableData { get; set; } = new();

    private async Task SelectedPage(int page)
    {
        if (appStateComponent is not null)
        {
            appStateComponent.PaginationQuery.PageNumber = page;
            await LoadData();
        }
    }
    private async Task Pageup()
    {
        if (appStateComponent is not null)
        {
            appStateComponent.PaginationQuery.PageNumber++;
            await LoadData();
        }

    }
    private async Task PageDown()
    {
        if (appStateComponent is not null)
        {
            appStateComponent.PaginationQuery.PageNumber--;
            await LoadData();
        }
    }
    private async Task LoadData()
    {
        if (appStateComponent is not null)
        {
            appStateComponent.AddTrackingFilterToRequest();

            EncodedString = await SerializeAndEncode.ObjectToJsonAndEncode(@appStateComponent.PaginationQuery);

            var response = await trackingManager.GetTrackingsFiltered(EncodedString);

            appStateComponent.PagedResponse.TotalRecords = response.TotalRecords;
            appStateComponent.PagedResponse.TotalPages = response.TotalPages;

            TableData = Mapping.Mapper.Map<List<TrackingReportVm>>(response.Data);
            StateHasChanged();
        }

    }
    protected override async Task OnParametersSetAsync()
    {
        await LoadData();
    }
}