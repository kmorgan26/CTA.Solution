@inject ToFromManager toFromManager

<FormFieldComponent LabelName="To/From">
    <ControlToRender>
        <InputSelect ValueExpression="@(()=> SelectedTofromId)" id="tofromSelect" DisplayName="To/From" class="form-control" Value="SelectedTofromId"
                     ValueChanged="@((int? value) => ChangeTofrom(value))">
            <option value=0>-----</option>
            @foreach (var item in _toFromVms)
            {
                <option value="@item.Id">@item.Name</option>
            }
        </InputSelect>
    </ControlToRender>
</FormFieldComponent>

@code {

    [Parameter]
    public EventCallback<int?> TofromIdChanged { get; set; }

    [Parameter]
    public int? SelectedTofromId { get; set; }

    [CascadingParameter]
    public AppStateComponent? appStateComponent { get; set; }

    private List<GenericListVm> _toFromVms = new();

    private async Task ChangeTofrom(int? value)
    {
        if (appStateComponent is not null)
        {
            SelectedTofromId = Convert.ToInt32(value);
            appStateComponent.AppStateReset();
            await TofromIdChanged.InvokeAsync(SelectedTofromId);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var toFroms = await toFromManager.GetAllAsync();
        _toFromVms = Mapping.Mapper.Map<List<GenericListVm>>(toFroms);
    }
    protected override async Task OnParametersSetAsync()
    {
        if (appStateComponent is not null && appStateComponent.ToFromId is not null)
        {
            await Task.Delay(0);
            SelectedTofromId =
            appStateComponent.ToFromId != null
                ? appStateComponent.ToFromId : 0;
        }        
    }
}