@page "/password/change"
@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<h2>Reset your password.</h2>

<div class="card">
    <div class="card-body">
        <h5 class="card-title">Please enter your details</h5>

        <EditForm Model="_passwordResetModel" OnValidSubmit="ChangePassword">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="email">Email address</label>
                <InputText Id="email" class="form-control" @bind-Value="_passwordResetModel.Email" />
                <ValidationMessage For="@(() => _passwordResetModel.Email)" />
            </div>

            <div class="form-group">
                <label for="password">New Password</label>
                <InputText Id="newpassword" type="password" class="form-control" @bind-Value="_passwordResetModel.NewPassword" />
                <ValidationMessage For="@(() => _passwordResetModel.NewPassword)" />
            </div>

            <div class="form-group">
                <label for="password">Confirm New Password</label>
                <InputText Id="confirmpassword" type="password" class="form-control" @bind-Value="_passwordResetModel.ConfirmNewPassword" />
                <ValidationMessage For="@(() => _passwordResetModel.ConfirmNewPassword)" />
            </div>
            <button type="submit" class="btn btn-primary">Submit</button>
        </EditForm>
    </div>
</div>


@code {

    private PasswordResetModel _passwordResetModel = new();
    private bool ShowErrors;
    private IEnumerable<string> Errors;

    private async Task ChangePassword()
    {
        ShowErrors = false;

        var result = await AuthService.ResetPassword(_passwordResetModel);

        if(result.Successful)
        {
            NavigationManager.NavigateTo("/password/success");
        }
        else
        {
            Errors = result.Errors;
            ShowErrors = true;
        }
    }
}
