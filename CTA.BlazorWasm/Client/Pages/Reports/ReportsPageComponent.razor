@page "/reports"
@inject NavigationManager _navigation

<h3>
    <MudIcon Icon="@Icons.Material.Filled.List" Size="Size.Large" Class="m-3" />
    Reports
</h3>

<MudPaper Width="600px" Class="mb-4">
    <MudList Clickable="true" @bind-SelectedItem="selectedItem" @bind-SelectedValue="selectedValue">
        <MudListSubheader>
        </MudListSubheader>
        <MudListItem Text="GDIT and Government Open Contract Letters" Icon="@Icons.Material.Filled.Brightness1" Value="1" />
        <MudListItem Text="GDIT and Sub-Contractors Open Contract Letters" Icon="@Icons.Material.Filled.Brightness1" Value="2" />
        <MudDivider />
        <MudListItem Text="GDIT and Government Open RFPs" Icon="@Icons.Material.Filled.Brightness1" Value="3" />
        <MudListItem Text="GDIT and Sub-Contractors Contract Open RFPs" Icon="@Icons.Material.Filled.Brightness1" Value="4" />
    </MudList>
</MudPaper>

<div class="col">
    @if (selectedValue != null)
    {
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="GetReportAsync">SUBMIT</MudButton>
    }
</div>

@code {

    [CascadingParameter]
    public AppStateComponent? appStateComponent { get; set; }

    MudListItem selectedItem = new();
    object? selectedValue = new();

    //private string? _selectedReport;

    public string SerializedParameter { get; set; } = string.Empty;

    private async Task GetReportAsync()
    {
        if (selectedValue is not null && appStateComponent is not null)
        {
            appStateComponent.TrackingFilter = await ReportService.GetReportFilter(selectedValue.ToString()!);
            appStateComponent.AddTrackingFilterToRequest();

            SerializedParameter = await SerializeAndEncode.ObjectToJsonAndEncode(appStateComponent.PaginationQuery);
            _navigation.NavigateTo("/report/" + SerializedParameter);
        }
    }
}